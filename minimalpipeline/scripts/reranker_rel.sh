DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# load the classpath stored in the classpath.txt file.
# The classpath can be generated by using the (ClassPathPrint) class.

source $DIR/../classpath.txt
echo "DIR: $DIR"


# load settings from a config file
function load {
    if [ -z $1 ]; then
        echo "config file not specified"
        exit 1
    elif [ ! -f $1 ]; then
        echo "file $1 not found"
        exit 1
    fi
    echo -n "loading settings from file: $1... "; 
    source $1
    echo "done"    
}

# print the value of a var
function print {
    var_name="$1"
    echo "$var_name = \"${!var_name}\""
}

function clean { 
    if [ -z "$1" ]; then
        echo "neither \"train\" nor \"test\" specified"
        exit 1
    elif [ "$1" != "train" ] && [ "$1" != "test" ]; then
        echo "wrong argument value: \"$1\". Only \"train\" and \"test\" allowed"
    fi
    casesDirVarname="${1}CasesDir"
    casesDir="${!casesDirVarname}"
    echo "casesDir = $casesDir"
    for file in "$casesDir"/*; do
        if [ ! -z $file ] && [ -f $file ]; then
            echo -n "removing file $file... "
            rm $file
            echo "done"
        fi
    done
    
}

function write {
    if [ -z $skipSerializationCheck ] ||  [ $skipSerializationCheck != "true" ]; then
        skipSerializationCheck="false"
    fi
    echo "trainQuestionsPath = \"$trainQuestionsPath\""
    echo "trainCandidatesPath = \"$trainCandidatesPath\""
    echo "trainCasesDir = \"$trainCasesDir\""
    echo "trainOutputDir = \"$trainOutputDir\""
    echo "testQuestionsPath = \"$testQuestionsPath\""
    echo "testCandidatesPath = \"$testCandidatesPath\""
    echo "testCasesDir = \"$trainCasesDir\""
    echo "testOutputDir = \"$testOutputDir\""
    echo "candidatesToKeepInTrain = \"$candidatesToKeepInTrain\""
    echo "candidatesToKeepInTest = \"$candidatesToKeepInTest\""
    echo "skipSerializationCheck = $skipSerializationCheck"
    echo "lang = \"$lang\""
    
    if [ -z "$1" ]; then
        echo "neither train nor test specified"
        exit 1
    fi
    
    if [ "$1" != "train" ] && [ "$1" != "test" ]; then
        echo "wrong argument value: \"$1\". Only \"train\" and \"test\" allowed"
        exit 1
    fi
    
    if [ ! -z skipSerializationCheck ] && [ $skipSerializationCheck = "true" ]; then
        skipSerializationCheck="-skipSerializationCheck"
    else
        skipSerializationCheck=""
    fi
    echo "skipSerializationCheck = $skipSerializationCheck"
    
    if [ "$1" == "train" ]; then
        java -cp $CLASSPATH qa.qcri.qf.pipeline.trec.TrecPipelineTrainOnlyRel \
             -trainQuestionsPath "$trainQuestionsPath" \
             -trainCandidatesPath "$trainCandidatesPath" \
             -trainOutputDir "$trainOutputDir" \
             -trainCasesDir "$trainCasesDir" \
             -candidatesToKeepInTrain "$candidatesToKeepInTrain" \
             "$skipSerializationCheck" \
             -lang "$lang" 
        
    elif [ "$1" == "test" ]; then
        java -cp $CLASSPATH qa.qcri.qf.pipeline.trec.TrecPipelineTestOnlyRel \
             -testQuestionsPath "$testQuestionsPath" \
             -testCandidatesPath "$testCandidatesPath" \
             -testOutputDir "$testOutputDir" \
             -testCasesDir "$testCasesDir" \
             -candidatesToKeepInTest "$candidatesToKeepInTest" \
             "$skipSerializationCheck" \
             -lang "$lang" 
    fi
    
<<COMMENT
    if [ ! -z $skipSerializationCheck ] && [ $skipSerializationCheck = "true" ]; then
        java -cp $CLASSPATH qa.qcri.qf.pipeline.trec.TrecPipelineRunnerOnlyRel \
             -trainQuestionsPath "$trainQuestionsPath" \
             -trainCandidatesPath "$trainCandidatesPath" \
             -trainOutputDir "$trainOutputDir" \
             -trainCasesDir "$trainCasesDir" \
             -testQuestionsPath "$testQuestionsPath" \
             -testCandidatesPath "$testCandidatesPath" \
             -testOutputDir "$testOutputDir" \
             -testCasesDir "$testCasesDir" \
             -candidatesToKeepInTrain "$candidatesToKeepInTrain" \
             -candidatesToKeepInTest "$candidatesToKeepInTest" \
             -skipSerializationCheck \
             -lang "$lang" 
    else 
        java -cp $CLASSPATH qa.qcri.qf.pipeline.trec.TrecPipelineRunnerOnlyRel \
             -trainQuestionsPath "$trainQuestionsPath" \
             -trainCandidatesPath "$trainCandidatesPath" \
             -trainOutputDir "$trainOutputDir" \
             -trainCasesDir "$trainCasesDir" \
             -testQuestionsPath "$testQuestionsPath" \
             -testCandidatesPath "$testCandidatesPath" \
             -testOutputDir "$testOutputDir" \
             -testCasesDir "$testCasesDir" \
             -candidatesToKeepInTrain "$candidatesToKeepInTrain" \
             -candidatesToKeepInTest "$candidatesToKeepInTest" \
             -lang "$lang"            
    fi
    
COMMENT
}

function folds {
    train_and_test_dir=$(dirname "$trainOutputDir")"/"
    echo "train and test dir = \"$train_and_test_dir\""
    echo "foldsNum = $foldsNum"
    
    if [ -z "$train_and_test_dir" ] || [ ! -d "$train_and_test_dir" ]; then
        echo "<train and test dir> not found"
        exit 1
    fi    
    
    python scripts/folds.py "$train_and_test_dir" "$foldsNum"
}

function cvtrain { 
    folds_dir=$(dirname "$trainOutputDir")"/folds"
    echo "folds_dir = \"$folds_dir\""
    
    if [ -z "$folds_dir" ] || [ ! -d "$folds_dir" ]; then
        echo "<folds_dir> not found"
        exit 1
    fi    
    python scripts/svm_run_cv.py --params "-t 5 -F 3 -C + -W R -V R -m 400" --ncpus 2 "$folds_dir"
}

function train {
    echo "train_dir = $trainOutputDir"
    
    if [ -z "$trainOutputDir" ] || [ ! -d "$trainOutputDir" ]; then
        echo "<train_dir> not found"
        exit 1
    fi
    #./tools/SVM-Light-1.5-rer/svm_learn --params "-t 5 -F 3 -C + -W R -V R -m 400" "$" "$trainOutputDir/svm.train" "$trainOutputDir/svm.model"
    eval tools/SVM-Light-1.5-rer/svm_learn "-t 5 -F 3 -C + -W R -V R -m 400" "$trainOutputDir"/svm.train "$trainOutputDir/svm.model"
    eval tools/SVM-Light-1.5-rer/svm_classify "$testOutputDir"/svm.test "$trainOutputDir"/svm.model "$testOutputDir/svm.pred"
    #echo "./tools/SVM-Light-1.5-rer/svm_learn -t 5 -F 3 -C + -W R -V R -m 400 $trainOutputDir/svm.train $trainOutputDir/svm.model"
    python scripts/ev_cv.py --format trec --threshold 15 "$testOutputDir"/svm.test.res "$testOutputDir"/svm.pred
}

function cveval {
    folds_dir=$(dirname "$trainOutputDir")"/folds"
    echo "folds_dir = \"$folds_dir\""
    
    if [ -z "$folds_dir" ] || [ ! -d "$folds_dir" ]; then
        echo "<folds_dir> not found"
        exit 1
    fi    
    python scripts/ev_cv.py --format trec --threshold 15 "$folds_dir"
}

function evaluate {
    echo "test_dir = \"$testOutputDir\""
    
    if [ -z "$testOutputDir" ] || [ ! -d "$testOutputDir" ]; then
        echo "<test dir> not found"
        exit 1
    fi
    python scripts/ev.py --format trec --threshold 15 "$testOutputDir"/svm.test.res "$testOutputDir"/svm.pred
}



while [ -n "$(echo $1 | grep '-')" ]; do
    case $1 in
        -load ) echo '-process options -load'
            load "$2"
            shift;;  
        -print) echo '-process option -print'
            print "$2"
            shift;;
        -clean) echo '-process option -clean'
            clean "$2"
            shift;;
        -write) echo '-process option -write'
            write "$2"
            shift;;
        -folds) echo '-process option -folds'
            folds;;
        -cvtrain) echo '-process option -cvtrain'
            cvtrain;; 
        -train) echo '-process option -train'
            train;;  
        -eval) echo "-process option -eval"            
            evaluate;; 
        -cveval) echo '-process option -cveval'    
            cveval;;
    esac
    shift
done


